function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}import PropTypes from'prop-types';import{cleanUpValue,getIndex,refineValue,getCurrentRefinementValue,getResults}from'../core/indexUtils';import createConnector from'../core/createConnector';var namespace='refinementList';function getId(a){return a.attributeName}function getCurrentRefinement(a,b,c){return getCurrentRefinementValue(a,b,c,namespace+'.'+getId(a),[],function(d){return'string'==typeof d?''===d?[]:[d]:d})}function getValue(a,b,c,d){var e=getCurrentRefinement(b,c,d),f=-1===e.indexOf(a),g=f?e.concat([a]):e.filter(function(h){return h!==a});return g}function _refine(a,b,c,d){var e=getId(a),f=_defineProperty({},e,0<c.length?c:'');return refineValue(b,f,d,!0,namespace)}function _cleanUp(a,b,c){return cleanUpValue(b,c,namespace+'.'+getId(a))}var sortBy=['isRefined','count:desc','name:asc'];export default createConnector({displayName:'AlgoliaRefinementList',propTypes:{id:PropTypes.string,attributeName:PropTypes.string.isRequired,operator:PropTypes.oneOf(['and','or']),showMore:PropTypes.bool,limitMin:PropTypes.number,limitMax:PropTypes.number,defaultRefinement:PropTypes.arrayOf(PropTypes.string),withSearchBox:PropTypes.bool,searchForFacetValues:PropTypes.bool,transformItems:PropTypes.func},defaultProps:{operator:'or',showMore:!1,limitMin:10,limitMax:20},getProvidedProps:function getProvidedProps(a,b,c,d,e){var f=this,g=a.attributeName,h=a.showMore,i=a.limitMin,j=a.limitMax,k=h?j:i,l=getResults(c,this.context),m=!!l&&!!l.getFacetByName(g),n=!!(e&&e[g]&&''!==e.query),o=a.withSearchBox||a.searchForFacetValues;if('development'===process.env.NODE_ENV&&a.searchForFacetValues&&console.warn('react-instantsearch: `searchForFacetValues` has been renamed to`withSearchBox`, this will break in the next major version.'),a.withSearchBox&&this.context.multiIndexContext)throw new Error('react-instantsearch: searching in *List is not available when used inside a multi index context');if(!m)return{items:[],currentRefinement:getCurrentRefinement(a,b,this.context),canRefine:m,isFromSearch:n,withSearchBox:o};var p=n?e[g].map(function(r){return{label:r.value,value:getValue(r.value,a,b,f.context),_highlightResult:{label:{value:r.highlighted}},count:r.count,isRefined:r.isRefined}}):l.getFacetValues(g,{sortBy:sortBy}).map(function(r){return{label:r.name,value:getValue(r.name,a,b,f.context),count:r.count,isRefined:r.isRefined}}),q=a.transformItems?a.transformItems(p):p;return{items:q.slice(0,k),currentRefinement:getCurrentRefinement(a,b,this.context),isFromSearch:n,withSearchBox:o,canRefine:0<p.length}},refine:function refine(a,b,c){return _refine(a,b,c,this.context)},searchForFacetValues:function searchForFacetValues(a,b,c){return{facetName:a.attributeName,query:c}},cleanUp:function cleanUp(a,b){return _cleanUp(a,b,this.context)},getSearchParameters:function getSearchParameters(a,b,c){var d=b.attributeName,e=b.operator,f=b.showMore,g=b.limitMin,h=b.limitMax,i=f?h:g,j='and'===e?'addFacet':'addDisjunctiveFacet';return a=a.setQueryParameters({maxValuesPerFacet:Math.max(a.maxValuesPerFacet||0,i)}),a=a[j](d),getCurrentRefinement(b,c,this.context).reduce(function(l,m){return l[j+'Refinement'](d,m)},a)},getMetadata:function getMetadata(a,b){var c=getId(a),d=this.context;return{id:c,index:getIndex(this.context),items:0<getCurrentRefinement(a,b,d).length?[{attributeName:a.attributeName,label:a.attributeName+': ',currentRefinement:getCurrentRefinement(a,b,d),value:function value(e){return _refine(a,e,[],d)},items:getCurrentRefinement(a,b,d).map(function(e){return{label:''+e,value:function value(f){var g=getCurrentRefinement(a,f,d).filter(function(h){return h!==e});return _refine(a,b,g,d)}}})}]:[]}}});